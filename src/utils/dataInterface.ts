
// early... will change my mind here..

// we will need a serviceController Object
// service controller takes DataInterface to generate datasource/gridconfig
// and url and enpoints like create new/update/delete/getAll/getOne


export type DataInterface = {
  /**
   * primary key, will use for selection during reload/delete/update
   * either 1 or many to generate key
   * important you dont use null columns here
   * project code is not part of this..
   * except this to be unique and autogenerated on db side... (might need to rethink this...)
   */
  primaryColumn: string;

  /**
   * columns we can edit/ custom headername etc
   */
  columns: DataInterfaceColumn[];

  /**
   * sort order
   */
  sortOrder: {
    attribute: string;
    ascending: boolean;
  }[];

  /**
   * col group cells
   */
  groupCells?: string[][];

  /**
   * column width
   */
  colWidth: number[];

  /**
   * modified
   * to get updated without getting all
   */
  modified?: string;

  /**
   * deleted column
   * only when fetchig data.
   * if this is set it will set this to false value on first fetch
   * if update, then we get all, but use this to filter rows to remove
   */
  deleted?: { columnName: string; trueValue: string };

  /**
   * import meta column to show in change log
   * only for import dialog from excel, might want related data
   */
  importColumns?: Record<string, string | string[]>;
};

export type DataInterfaceColumn = {
  /**
   * helper to know if its readonly
   */
  readOnly: boolean;

  /**
   * what to use in grid/labels
   */
  label: string;

  /**
   * type of data, defaults to text
   */
  type: "text" | "number" | "date";

  /**
   *  default false
   */
  removeFromGrid?: boolean;

  /**
   *  default false
   */
  setAsOptionalInGrid?: boolean;

  /**
   * read only in grid (column)
   * default false
   */
  readOnlyGrid?: boolean;

  /**
   * is checkbox, you need to set checkboxChecked & checkboxUnchecked
   */
  isCheckbox?: boolean;

  /**
   * to set null values to 0
   */
  blankToZero?: boolean;

  /**
   * default value on new
   */
  defaultValue?: null | string | Date | number;

  /**
   * dynamic if column
   */
  readOnlyIf?: {
    ifColumn: string;
    operator:
      | "$GT$"
      | "$LT$"
      | `$EQ$`
      | `$NEQ$`
      | `$GTEQ$`
      | `$LTEQ$`
      | "$NBLANK$"
      | "$BLANK$";
    value: unknown;
  };

  /**
   * default value on new
   */
  mandatory?: boolean;

  /**
   * parent is like cabletype on a drum or company on a person.
   */

  /**
   * parent_view api to use, will bring button on for opening dialog
   * you need to make sure its added
   * you also need to set parentViewType, parentTitle, parentFrom, parentColumnTo, parentColumnsFromTo
   */
  parentViewApi?: string;

  /**
   * title on dialog
   */
  parentTitle?: string;

  /**
   * parent api column to get
   */
  parentColumnFrom?: string;

  /**
   * column to insert value from parent
   */
  parentColumnTo?: string;

  /**
   * parent column to update, using par string,string
   * [[fromParentColumn, toChildColumn],[fromParentColumn, toChildColumn]]
   * useful if you have many columns from parent, also depends on view
   * this is also used when doing copy/paste and you need to update related at the same time
   */
  parentColumnsFromTo?: [string, string][];
};
